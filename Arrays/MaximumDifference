Time: O(n2)
Sapce: O(1)

class Solution {
    public int maximumDifference(int[] nums) {
        int n = nums.length;
          int res = nums[1] - nums[0];

          for(int i = 0; i < n-1; i++)
          {
            for(int j = i+1; j < n; j++)
            {
                res = Math.max(res, nums[j] - nums[i]);
                 //nums[j] - nums[i]: Calculates the difference between the elements at indices i and j.
                 //Math.max(res, ...): Compares the current maximum difference (res) with the new difference and keeps the larger value.
            }

           
          }
return res;

    }
}
=============================================
Time: O(n)
Space: O(1)

class Solution {
    public int findMaxDiff(int[] arr) {
        // code here
        
        int n = arr.length;
        
        
        
        int res = arr[1] - arr[0];
        
        int minval = arr[0];
        
        for(int j = 1; j < n; j++)
        {
         //   res = Math.max(arr, arr[j] - minval);
             res = Math.max(res, arr[j] - minval);
            
            minval = Math.min(minval, arr[j]);
        }
        
        return res;
    }
}

