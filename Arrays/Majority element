169. Majority Element

Given an array nums of size n, return the majority element.
The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.
Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2
===========================================================
O(n)
O(1)
============================================================
class Solution {
    public int majorityElement(int[] nums) {
         
       int n = nums.length;
       int count = 1;
       int res = 0;

       for(int i = 1; i < n; i++)
       {
            if(nums[res] == nums[i]) {          
                count++;         
            }else{
                count--;
            }
            if(count == 0) 
            {   
                 res = i;
                 count = 1;
            }
       }

       count = 0;
       for(int i = 0; i < n; i++)
       {
        if(nums[res] == nums[i]){
            count++;
        }
       }
       if (count > n / 2) {
            return nums[res]; // Return the majority element
        }

        return -1; 
    }
}
=======================================================================
O(n2)
O(1)
=======================================================================
 static int findMajority(int arr[], int n)
    {
    	for(int i = 0; i < n; i++)
    	{
    		int count = 1;

    		for(int j = i + 1; j < n; j++)
    		{
    			if(arr[i] == arr[j])
    				count++;
    		}

    		if(count > n / 2)
    			return i;
    	}

    	return -1;
    }
