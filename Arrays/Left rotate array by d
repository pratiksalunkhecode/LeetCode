Time: o(n*n)
======================

class Solution {
    
     void leftRotateByonce(int arr[], int n)
    {
        // int n = arr.length;
        
        int temp = arr[0];
        
        for(int i = 1; i < n; i++)
        {
            arr[i-1]= arr[i];
            
        }
        arr[n - 1] = temp;
    }
    
    void leftRotate(int arr[], int d, int n) {
        // code here
       // int n = arr.length;
        for(int i = 0; i < d; i++)
        {
          leftRotateByonce(arr, n);
        }
        
    }   
}
======================================================

Time: o(nd)
space: o(d)


class Solution {
    
    void leftRotate(int arr[], int d) {
        // code here
      int n = arr.length;
        int temp[] = new int[d];
        
        for(int i = 0; i < d; i++)
        {
            temp[i] = arr[i];
        }
        
        for(int i = d; i < n; i++)
        {
            arr[i-d] = arr[i];
        }
        
        for(int i = 0; i < d; i++)
        {
            arr[n-d+i] = temp[i];
        }
    }
    
   
}
===============================================
Time: 0(n)
space: 0(1)

class Solution {
    
    void leftRotate(int arr[], int d) {
        // code here
        int n = arr.length;
        reverse(arr,0,d-1);
        reverse(arr,d,n-1);
        reverse(arr,0,n-1);
     
    }
    
    void reverse(int arr[], int low, int high)
    {
        while(low < high)
        {
            
            int temp = arr[low];
            arr[low] = arr[high];
            arr[high] = temp;
            low++;
            high--;
            
        }
    }
    
   
}


