Q) Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.
Example 1:
Input: head = [1,1,2]
Output: [1,2]

Approach:
Traverse the list from the head (or start) node. While traversing, compare each node with its next node.
If the data of the next node is the same as the current node then delete the next node.
Before we delete a node, we need to store the next pointer of the node 

Time Complexity: O(n)
Space Complexity: O(1)
======================================
class Solution {
    public ListNode deleteDuplicates(ListNode head) {

    ListNode curr = head;

    while(curr != null && curr.next != null)
    {
        if(curr.val == curr.next.val)
        {
            curr.next = curr.next.next;
        }else{
            curr = curr.next;
        }
    }
      return head;  
    }
}
