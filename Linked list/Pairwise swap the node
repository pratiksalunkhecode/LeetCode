Q) 24. Swap Nodes in Pairs
Given a linked list, swap every two adjacent nodes and return its head.
You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)
Example 1:
Input: head = [1,2,3,4]
Output: [2,1,4,3]
=================================================================
changing data
==================================================================
class Solution {
    // Function to pairwise swap elements of a linked list.
    // It should returns head of the modified list
    public Node pairwiseSwap(Node head) {
        // code here
        
        Node curr = head;
        
        if(head == null || head.next == null)
        {
            return head;
        }
        
        while(curr != null && curr.next != null)
        {
            int temp = curr.data;
            curr.data = curr.next.data;
            curr.next.data = temp;
            curr = curr.next.next;
            
        }
       return head;
    }
}
====================================================================
changing links
====================================================================
class Solution {
    public ListNode swapPairs(ListNode head) {
   
    // Function to pairwise swap elements of a linked list.
    // It should returns head of the modified list
        if(head == null || head.next == null)
        {
            return head;
        }
        // code here   
        ListNode curr = head.next.next;
        ListNode prev = head;
         head = head.next;
         head.next = prev;
         while(curr != null && curr.next != null)
         {
            prev.next = curr.next;
            prev = curr;
            ListNode next = curr.next.next;
            curr.next.next = curr;
            curr = next;
         }
         prev.next = curr;
         return head;   
    }
}
