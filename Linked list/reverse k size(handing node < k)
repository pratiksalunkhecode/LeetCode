Q) Reverse Nodes in k-Group
Solved
Hard
Topics
Companies
Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.
Example 1:
Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]
=============================================================================
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {

      ListNode temp = head;
      int count = 0;
      while(count < k && temp != null)
      {
        temp = temp .next;
        count++;
      }
      if(count < k)
      {
        return head;
      }
        
        ListNode curr = head;
        ListNode next = null;
        ListNode prev = null;
        count = 0;

        
        
        while(curr != null && count < k)
        {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
            count++;
            
        }
        
        if(next != null){
        ListNode rest_head = reverseKGroup(next, k);
        head.next = rest_head;
        }
        return prev;
        
    }
}
