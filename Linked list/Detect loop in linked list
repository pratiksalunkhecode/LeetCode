Q) Detect Loop in linked list
Difficulty: MediumAccuracy: 43.49%Submissions: 441K+Points: 4
Given the head of a singly linked list, the task is to check if the linked list has a loop. A loop means that the last node of the linked list is connected back to a node in the same list.  So if the next of the last node is null. then there is no loop.

Note: You need to return a boolean value true if there is a loop, otherwise false.

The following is an internal representation of every test case (three inputs).
A LinkedList and a pos (1-based index)-Position of the node to which the last node links back if there is a loop. If the linked list does not have any loop, then pos = 0.

Examples:

Input: LinkedList: 1->3->4
Output: true
============================================================
Time: O(n2)
Space: O(1)
============================================================

class Solution {
    // Function to check if the linked list has a loop.
    public static boolean detectLoop(Node head) {
        // Add code here
        
        Node curr = head;
        
        while(curr != null)
        {
            Node check = head;
            
            while(check != curr)
            {
                if(curr.next == check)
                {
                    return true;
                }
                
                check = check.next;
            }
            curr = curr.next;            
        }
        return false;
    }
}
================================================================
Time: O(n)
Space: O(n)

class Solution {
    // Function to check if the linked list has a loop.
    public static boolean detectLoop(Node head) {
        // Add code here
       
       HashSet<Node> s = new HashSet<Node>();
       
       for(Node curr = head; curr != null; curr=curr.next)
       {
           if(s.contains(curr))
           {
               return true;
           }
           s.add(curr);
           
       }
       return false;
    }
}
===================================================================
O(n)
O(1)

class Solution {
    // Function to check if the linked list has a loop.
    public static boolean detectLoop(Node head) {
        // Add code here
       Node temp = new Node(0);
       Node curr = head;
     
       
       while(curr != null)
       {
           if(curr.next == null)
           {
               return false;
           }
           if(curr.next == temp)
           {
               return true;
           }
           
           Node curr_next = curr.next;
           curr.next = temp;
           curr = curr_next;
       }
       return false;
       
    }
}

