Segregate even and odd nodes in a Linked List
Difficulty: MediumAccuracy: 49.8%Submissions: 89K+Points: 4
Given a link list, modify the list such that all the even numbers appear before all the odd numbers in the modified list. The order of appearance of numbers within each segregation should be the same as that in the original list.

NOTE: Don't create a new linked list, instead rearrange the provided one.

Examples:

Input: Linked list: 17->15->8->9->2->4->6
Output: 8->2->4->6->17->15->9
==========================================================================
Time: O(n)
Space: O(1)
===========================================================================
class Solution {
    public ListNode oddEvenList(ListNode head) {

         ListNode evenStart = null;
        ListNode evenEnd = null;
        
        ListNode oddStart = null;
        ListNode oddEnd = null;
       
        
        for(ListNode curr = head; curr != null; curr = curr.next)
        {
           int x = curr.val;
            
            if(x%2 == 0)
            {
                if(evenStart == null)
                {
                   evenStart = curr;
                   evenEnd = evenStart;
                }else{
                    evenEnd.next = curr;
                    evenEnd = evenEnd.next;
                }
            }
            else{
                if(oddStart == null)
                {
                     oddStart = curr;
                     oddEnd = oddStart;
                }else{
                    oddEnd.next = curr;
                    oddEnd = oddEnd.next;
                }
            }
        }
        
        if(oddStart == null || evenStart == null)
        {
            return head;
        }
        
        evenEnd.next = oddStart;
        oddEnd = null;
        return evenStart;
        
    }
}
=================================================================
odd Even 
=================================================================
