Q) Input: arr[] = [10, 4, 5, 90, 120, 80]
Output: [1, 1, 2, 4, 5, 1]
Explanation: Traversing the given input span 10 is greater than equal to 10 
and there are no more elements behind it so the span is 1, 4 is greater than equal to 4 and smaller than 10 so the span is 
1, 5 is greater than equal to 4,5 and smaller than 10 so the span is 2,  and so on. 
Hence the output will be 1 1 2 4 5 1.

Time: O(n2)
Space: O(1)
=========================================================================
class Solution {
    // Function to calculate the span of stock's price for all n days.
    public ArrayList<Integer> calculateSpan(int[] arr) {
        // write code here
        int n = arr.length;
        ArrayList<Integer> list = new ArrayList<>();
        
        for(int i = 0; i < n; i++)
        {
            int span = 1;
            
            for(int j = i-1; j >= 0 && arr[j] <= arr[i]; j--)
            {
                span++;
                
            }
            
            list.add(span);
        }
        
        return list;
    }
}
==========================================================================

Time Complexity:	O(n)
Space Complexity:	O(n)
==========================================================================
class Solution {
    // Function to calculate the span of stock's price for all n days.
    public ArrayList<Integer> calculateSpan(int[] arr) {
        // write code here
        
        int n= arr.length;
        
        ArrayList<Integer> list = new ArrayList<>();
        Stack<Integer> s = new Stack<>();
        
        list.add(1);
        
        s.push(0);
        
        for(int i = 1; i < n; i++)
        {
            while(s.isEmpty() == false && arr[s.peek()] <= arr[i])
            {
                s.pop();
            }
            
            int span = (s.isEmpty())? i + 1 : i-s.peek();
            list.add(span);
            s.push(i);
        }
        return list;
    }
}


                                                                             

